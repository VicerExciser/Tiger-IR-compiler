package mips.cfg;

import mips.*;
import mips.cfg.*;
import ir.cfg.*;

import java.util.Set;
import java.util.TreeSet;
import java.util.LinkedHashSet;

public class MIPSBlock implements Comparable<MIPSBlock> {

	public static int BLOCKNUM = 0;		//// Static counter for total # of blocks overall
	
	public MIPSFunction parent;
	public String id;	// Block identifier generated by parent function
	public int blocknum;
	public Set<MIPSInstruction> instructions;
	public Set<MIPSBlock> predecessors;
	public Set<MIPSBlock> successors;
	public MaxBasicBlock associatedIRBlock;
	
	// public int size;
	// public MIPSInstruction leader;
	// public MIPSInstruction terminator;


	// public MIPSBlock(MIPSFunction parent) {
	// 	this(parent, null);
	// }

	public MIPSBlock(MIPSFunction parent, MaxBasicBlock associatedIRBlock) {
		this.parent = parent;
		this.id = parent.getUniqueBlockID();
		this.associatedIRBlock = associatedIRBlock;
		this.instructions = new LinkedHashSet<>();
		this.predecessors = new TreeSet<>();
		this.successors = new TreeSet<>();

		this.parent.addBlock(this);		//// New blocks automatically added to parent function's CFG

		this.blocknum = BLOCKNUM;
		BLOCKNUM++;
	}


	public void appendInstruction(MIPSInstruction inst) {
		if (this.instructions.add(inst)) {		//// .add() will fail for duplicates
			inst.parentBlock = this;
		}
	}

	public int size() {
		return this.instructions.size();
	}

	public MIPSInstruction getLeader() {
		return ((MIPSInstruction[]) this.instructions.toArray())[0];
	}

	public MIPSInstruction getTerminator() {
		return ((MIPSInstruction[]) this.instructions.toArray())[this.instructions.size()-1];
	}


	@Override
	public String toString() {
		return id + "(B#"+String.valueOf(this.blocknum)+")";
	}

	@Override 
	public int compareTo(MIPSBlock other) {
		// return this.id.compareToIgnoreCase(other.id);
		return this.blocknum - other.blocknum;
	}

	@Override 
	public int hashCode() {
		int result = 17;
		result = 31 * result + this.parent.name.toLowerCase().hashCode();
		result = 31 * result + this.id.hashCode();
		result = 31 * result + this.blocknum;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null || !(obj instanceof MIPSBlock)) return false;
		if (this == obj) return true;
		MIPSBlock bbb = (MIPSBlock) obj;
		return this.id.equalsIgnoreCase(bbb.id)
				// && this.parent.name.equalsIgnoreCase(bbb.parent.name);
				// && this.leader.opCode == bbb.leader.opCode;
				&& this.hashCode() == bbb.hashCode();
	}
}
